name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+**'

jobs:
  upload-archives:
    strategy:
      fail-fast: false
      matrix:
        target-triple:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - x86_64-unknown-linux-gnu
        include:
          - { target-triple: x86_64-pc-windows-msvc  , host-triple: x86_64-pc-windows-msvc  , os: windows-2022 }
          - { target-triple: x86_64-apple-darwin     , host-triple: x86_64-apple-darwin     , os: macos-13     }
          - { target-triple: x86_64-unknown-linux-gnu, host-triple: x86_64-unknown-linux-gnu, os: ubuntu-24.04 }

    name: Upload (${{ matrix.target-triple }})
    runs-on: ${{ matrix.os }}
    if: ${{ startsWith(github.ref, 'refs/tags/') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Set up `stable-${{ matrix.host-triple }}` (target: `${{ matrix.target-triple }}`)'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target-triple }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: upload-${{ matrix.target-triple }}

      - name: cargo-install
        run: cargo install --path . --target ${{ matrix.target-triple }} -v --locked

      - name: cargo-build
        run: cargo build --release --target ${{ matrix.target-triple }}

      - name: Create an asset
        id: asset
        run: |
          BIN_TARGET=cargo-compete
          if ${{ contains(matrix.target-triple, 'pc-windows') }}; then
            DOT_EXE=.exe
          fi
          ASSET_STEM="$BIN_TARGET-${GITHUB_REF#refs/tags/}-${{ matrix.target-triple }}"
          git archive -o "./$ASSET_STEM.tar" --prefix "$ASSET_STEM/" HEAD
          tar -xf "./$ASSET_STEM.tar"
          mv "$HOME/.cargo/bin/$BIN_TARGET$DOT_EXE" "./$ASSET_STEM/"
          if ${{ contains(matrix.target-triple, 'pc-windows') }}; then
            ASSET="$ASSET_STEM.zip"
            7z a "$ASSET" "./$ASSET_STEM"
            zipinfo "./$ASSET"
          else
            ASSET="$ASSET_STEM.tar.gz"
            tar -czvf "./$ASSET" "./$ASSET_STEM"
          fi
          echo "asset=$ASSET" >> $GITHUB_OUTPUT
        shell: bash

      - name: Upload the artifact
        uses: actions/upload-artifact@v4
        with:
          name: assets-${{ matrix.target-triple }}
          path: ${{ steps.asset.outputs.asset }}

  upload-release-notes:
    name: Upload the release notes
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Prepare release notes
        run: python .github/scripts/extract-release-notes.py

      - name: Upload the release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md

  release:
    name: GitHub Release
    runs-on: ubuntu-24.04
    needs:
      - upload-archives
      - upload-release-notes

    steps:
      - name: Download the assets
        uses: actions/download-artifact@v4
        with:
          pattern: assets-*
          path: ./assets
          merge-multiple: true

      - name: Download the release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: GH Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: ./release-notes.md
          files: ./assets/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}